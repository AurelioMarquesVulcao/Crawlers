const puppeteer = require('puppeteer');
const fs = require('fs');


const roboVersao1 = async (numero) => {
    const slow = numeroAleatorio(5, 10);
    const delay = numeroAleatorio(1, 5);
    // para abrir o navegador use o headless: false
    var browser = await puppeteer.launch({
        headless: true, slowMo: slow,
        ignoreHTTPSErrors: true,
        args: ['--ignore-certificate-errors']
    });
    var page = await browser.newPage();

    await page.goto('http://0.0.0.0:15673/#/queues/%2F/processo.JTE.extracao.novos-SP-2')
    await page.setViewport({ width: 1800, height: 92000 })

    await page.waitFor('#login > form > table > tbody > tr:nth-child(1) > td > input[type=text]');
    await page.type('#login > form > table > tbody > tr:nth-child(1) > td > input[type=text]', 'admin')
    await page.type('#login > form > table > tbody > tr:nth-child(2) > td > input[type=password]', 'crawler480')
    await page.click('#login > form > table > tbody > tr:nth-child(3) > td > input[type=submit]')

    await page.waitFor('#main > div:nth-child(5)')
    await page.click('#main > div:nth-child(5)')

    // colocar laço
    await page.type('#main > div.section-hidden.section-visible > div > form > table > tbody > tr:nth-child(5) > td > textarea', `${criaPost(numero)}`)
    await page.click('#main > div.section-hidden.section-visible > div > form > input[type=submit]:nth-child(5)')
    //console.log(criaPost(numero));

    //await page.waitFor(900)
    await browser.close()
}
const processosRJ = [
    "01006565720205010471",
    "01005079420205010072",
    "01003040720205010049",
    "01004656320205010066",
    "01014411120165010034",
    "01005155620205010077",
    "01004517920205010066",
    "01002727820205010541",
    "01007948820205010482",
    "01003559520205010282",
    "01019191920195010000",
    "01004960920205010511",
    "01002265420165010016",
    "01002652120205010207",
    "01003672720205010471",
    "01003045920205010452",
    "01004926920205010511",
    "01004979120205010511",
    "00106957720135010010",
    "01004997620205010021",
    "01005189720205010016",
    "01001454720205010281",
    "01002407320205010541",
    "00112497920155010062",
    "01003958520205010247",
    "01005302120205010046",
    "01005787020185010265",
    "01005190320205010204",
    "01004822220205010221",
    "01003364520205010038",
    "01013087520165010225",
    "00109216520155010284",
    "00115524820155010077",
    "01002401920205010462",
    "00111135320135010062",
    "01016329720175010203"


]
const processosSP = [
    "00021625020145020016",
    "10015286120195020016",
    "10010918820175020016",
    "02821003819995020016",
    "01736005720085020016",
    "00002055320105020016",
    "00026876620135020016",
    "00015675620115020016",
    "01443005020085020016",
    "00012517720105020016",
    "10011850220185020016",
    "10014982620195020016",
    "10009007220195020016",
    "10015311620195020016",
    "10011581920185020016",
    "10015294620195020016",
    "10008999220165020016",
    "01719005620025020016",
    "10001097420175020016",
    "00032612620125020016",
    "10011995420165020016",
    "00003305020125020016",
    "10007153420195020016",
    "10006045020195020016",
    "00008769720155020017",
    "10002956020185020017",
    "10014746320175020017",
    "10007688020175020017",
    "10013931720175020017",
    "10011240720195020017",
    "10003819420195020017",
    "10014648220185020017",
    "10006322020165020017",
    "10012133020195020017",
    "10003801220195020017",
    "10004079220195020017",
    "10010257120185020017",
    "10009018820185020017",
    "10004437120185020017",
    "10015525620195020609",
    "10012428020195020017",
    "10006867820195020017",
    "00021734220155020017",
    "10003507420195020017",
    "00016641420155020017",
    "10015672620175020017",
    "10009243420185020017",
    "10009128320195020017",
    "10009616120185020017",
    "10003001920175020017",
    "10008057320185020017",
    "10004442220195020017",
    "10019368720165020006",
    "10009254020195020710",
    "10010022820185020017",
    "10010120920175020017",
    "00024312320135020017",
    "10003313920175020017",
    "00015626020135020017",
    "10014673720185020017",
    "10002372320195020017",
    "10003207320185020017",
    "10019599720165020017",
    "10012119420185020017",
    "10000069820165020017",
    "10019166320165020017",
    "10014315820195020017",
    "01175002120045020017",
    "01391009320075020017",
    "00025100720105020017",
    "10002058620175020017",
    "00016451320125020017",
    "10004661720185020017",
    "10015340720165020232",
    "10002132920185020017",
    "10003983820165020017",
    "00017724320155020017",
    "10003845420165020017",
    "00010091320135020017",
    "10009715020165020058",
    "10013050820195020017",
    "10011102320195020017",
    "10011129020195020017",
    "10018850920175020017",
    "10015583020185020017",
    "10013643020185020017",
    "10011841420185020017",
    "10014047520195020017",
    "00005825020125020017",
    "10002624120165020017",
    "10001734720185020017",
    "10006997720195020017",
    "10000389820195020017",
    "00011887020155020018",
    "00012115020145020018",
    "10006824320165020018",
    "02708002420095020018",
    "10005334720165020018",
    "10000022420175020018",
    "10021500820175020018",
]
const processosSP15 = [
    "00109663320175150115",
    "00002870320145150107",
    "00104016120185150074",
    "00112776420165150113",
    "00119648120175150056",
    "00113178620165150132",
    "00113300320165150030",
    "00100520320155150094",
    "00100960920165150087",
    "00105528020165150079",
    "00105618720175150085",
    "00101236820175150018",
    "00104975420165150007",
    "00106981920175150134",
    "00109511920175150130",
    "00110012620175150007",
    "00114699320155150060",
    "00104907920155150045",
    "00104943920175150145",
    "00126096020165150018",
    "00132353920165150096",
    "00128307720165150039",
    "00107701520175150131",
    "00100210520185150085",
    "00120465420155150001",
    "00106823920185150099",
    "00118381120155150053",
    "00131724520155150097",
    "00103444020165150130",
    "00100358420175150097",
    "00100432820185150032",
    "00100086120185150099",
    "00125888120175150137",
    "00102632820145150012",
    "00102674520165150093",
    "00105980820165150067"
]
const processosMG = ['00021625020145020016', '00101972120205030158', '00103665120205030079']
const processos = processosSP

const post = async () => {
    for (let i = 0; i < processos.length; i++) {
        await roboVersao1(processos[i])
        await console.log('processo : ' + processos[i] + ' adicionado');

    }
}
// post()

//console.log("\033[31m Aqui esta o texto em vermelho.")

function criaPost(numero) {
    let post = `{
        "ExecucaoConsultaId" : "${makeid()}",
        "ConsultaCadastradaId" : "${makeid()}",
        "DataEnfileiramento" : "${new Date}",
        "NumeroProcesso" : "${numero}",
        "NumeroOab" : "null",        
        "SeccionalOab" : "SP"
    }`
    return post
}

// gera numero aleatório para preencher os campos os dados
function numeroAleatorio(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
// gera id aleatorio não unico
function makeid() {
    let text = "5ed9";
    let possible = "abcdefghijklmnopqrstuvwxyz0123456789";
    let letra = "abcdefghijklmnopqrstuvwxyz";
    let numero = "0123456789";

    for (var i = 0; i < 20; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}

// console.log(makeid());
//module.exports.RoboPuppeteer = roboVersao1